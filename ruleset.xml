<?xml version="1.0"?>
<ruleset name="PARAMEDICAL">
    <description>The PARAMEDICAL coding standard</description>

    <exclude-pattern>bin/</exclude-pattern>
    <exclude-pattern>build/</exclude-pattern>
    <exclude-pattern>cache/</exclude-pattern>
    <exclude-pattern>data/</exclude-pattern>
    <exclude-pattern>log/</exclude-pattern>
    <exclude-pattern>plugins/</exclude-pattern>
    <exclude-pattern>web/</exclude-pattern>
    <exclude-pattern>lib/**/sfDoctrineGuardPlugin/</exclude-pattern>
    <exclude-pattern>lib/**/base/</exclude-pattern>
    <exclude-pattern>lib/**/Base*</exclude-pattern>
    <exclude-pattern>lib/**/sfGuard*</exclude-pattern>
    <exclude-pattern>lib/migration/</exclude-pattern>
    <exclude-pattern>lib/vendor/</exclude-pattern>

    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />
    <rule ref="Generic.Classes.DuplicateClassName">
        <!-- No classes for templates -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="PEAR.Classes.ClassDeclaration">
        <!-- No classes for templates -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="Squiz.Classes.SelfMemberReference" />
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer" />
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter" />
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter.Found">
        <!-- Ignored because of sfWebRequest not necessarily needed -->
        <exclude-pattern>apps/**/actions.class.php</exclude-pattern>
        <!-- Ignored because of $field not necessarily needed in generators form filters queries -->
        <exclude-pattern>lib/filter/doctrine/</exclude-pattern>
        <!-- Ignored because tasks $arguments or $options are not necessarily used in the task execution -->
        <exclude-pattern>lib/task/</exclude-pattern>
    </rule>
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod.Found">
        <!-- Ignored to enable using mocks for proxying protected methods to test them-->
        <exclude-pattern>test/**/mocks/</exclude-pattern>
    </rule>

    <rule ref="Generic.Commenting.Todo" />
    <rule ref="PEAR.Commenting.ClassComment">
        <!-- No class comment forced for tests -->
        <exclude-pattern>test/</exclude-pattern>
        <!-- No classes for templates -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="PEAR.Commenting.FileComment">
        <!-- No file comment forced for tests -->
        <exclude-pattern>test/</exclude-pattern>
        <!-- File level comments are not needed for templates as no logic is involved -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="PEAR.Commenting.FunctionComment" />
    <rule ref="PEAR.Commenting.InlineComment" />
    <rule ref="Squiz.Commenting.EmptyCatchComment" />
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag" />
    <rule ref="PEAR.ControlStructures.ControlSignature" />
    <rule ref="Generic.ControlStructures.InlineControlStructure">
        <!-- Allowed to improve readability of template files -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="PEAR.ControlStructures.MultiLineCondition">
        <!-- Allowed to improve readability of template files -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="PEAR.Files.IncludingFile" />
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>
    <rule ref="Generic.Files.LineLength">
	    <properties>
		    <property name="lineLimit" value="120"/>
		    <property name="absoluteLineLimit" value="0"/>
	    </properties>
    </rule>
    <rule ref="PEAR.Formatting.MultiLineAssignment">
        <!-- Allowed to improve readability of template files -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="Generic.Functions.CallTimePassByReference" />
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing" />
    <rule ref="PEAR.Functions.FunctionCallSignature" />
    <rule ref="PEAR.Functions.FunctionCallSignature.Indent">
        <!-- Allowed to improve readability of template files -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="PEAR.Functions.FunctionDeclaration" />
    <rule ref="PEAR.Functions.ValidDefaultValue" />
    <rule ref="Squiz.Functions.FunctionDuplicateArgument" />
    <rule ref="Generic.NamingConventions.ConstructorName">
        <!-- No classes for templates -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName" />
    <rule ref="PEAR.NamingConventions.ValidClassName">
        <!-- No classes for templates -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="PEAR.NamingConventions.ValidClassName.StartWithCaptial" >
        <!-- Ignored: Class names enforced by symfony framework have to start with lowercase  -->
        <exclude-pattern>/apps/**/actions.class.php</exclude-pattern>
        <exclude-pattern>/apps/**/*Configuration.class.php</exclude-pattern>
        <exclude-pattern>/apps/**/*Helper.class.php</exclude-pattern>
        <exclude-pattern>/test/unit/model/doctrine/sfGuard*.classTest.php</exclude-pattern>
    </rule>
    <rule ref="PEAR.NamingConventions.ValidFunctionName" />
    <rule ref="PEAR.NamingConventions.ValidVariableName" />
    <rule ref="Squiz.Operators.IncrementDecrementUsage" />
    <rule ref="Generic.PHP.DisallowShortOpenTag" />
    <rule ref="Generic.PHP.DeprecatedFunctions" />
    <rule ref="Generic.PHP.ForbiddenFunctions" />
    <rule ref="Squiz.PHP.ForbiddenFunctions.FoundWithAlternative">
        <!-- Allowed to enable using print for form multipart support -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="Squiz.PHP.DisallowObEndFlush" />
    <!-- Disabled to start with but might be added to avoid infinite loops -->
    <!-- <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops" /> -->
    <rule ref="Squiz.PHP.DiscouragedFunctions" />
    <rule ref="Squiz.PHP.EmbeddedPhp" />
    <rule ref="Squiz.PHP.EmbeddedPhp.NoSemicolon">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.PHP.Eval" />
    <rule ref="Squiz.PHP.ForbiddenFunctions" />
    <rule ref="Squiz.PHP.GlobalKeyword" />
    <rule ref="Squiz.PHP.InnerFunctions" />
    <rule ref="Squiz.PHP.NonExecutableCode" />
    <rule ref="Squiz.Scope.MemberVarScope" />
    <rule ref="Squiz.Scope.MethodScope" />
    <rule ref="Squiz.Scope.StaticThisUsage" />
    <rule ref="Squiz.Strings.DoubleQuoteUsage" />
    <rule ref="Squiz.Strings.EchoedStrings" />
    <rule ref="Generic.WhiteSpace.DisallowTabIndent" />
    <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent" />
    <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent.Incorrect">
        <!-- Allowed to improve readability of template files -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
        <!-- Allowed to improve readability of functional tests blocks with requests & responses -->
        <exclude-pattern>test/functional/**/*Test.php</exclude-pattern>
    </rule>
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace" />
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace.Indent">
        <!-- Allowed to improve readability of template files -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="PEAR.WhiteSpace.ScopeIndent">
        <!-- Indent specific for templates due to HTML inner code allowed -->
        <exclude-pattern>apps/**/templates/</exclude-pattern>
    </rule>
    <rule ref="Squiz.WhiteSpace.CastSpacing" />
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing" />
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing" />
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing" />
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing.Before" >
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing" />
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing" />
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing" />
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace" />
</ruleset>